
//    TI_USCI_I2C_transmitinit(DEV_ADDR, 0x12);
//    while(TI_USCI_I2C_notready() );         // wait for bus to be free
//    if(TI_USCI_I2C_slave_present(DEV_ADDR)) {   // slave address may differ from
//        Board.SetFrontLeftLight(1);
//        Board.SetFrontRightLight(1);
//
//        uint8_t data1[2] = {0, 0};
//        TI_USCI_I2C_transmitinit(DEV_ADDR,0x12);  // init transmitting with
//        while(TI_USCI_I2C_notready());            // wait for bus to be free
//        TI_USCI_I2C_transmit(2, data1);           // start transmitting
//        while(TI_USCI_I2C_notready());            // wait for bus to be free
//
//        uint8_t data2[5] = {0, };
//        TI_USCI_I2C_receiveinit(DEV_ADDR, 0x12);
//        while(TI_USCI_I2C_notready());            // wait for bus to be free
//        TI_USCI_I2C_receive(5, data2);            // start transmitting
//        while(TI_USCI_I2C_notready());            // wait for bus to be free
//        while(1);
//    }
//    Board.SetRearLeftLight(1);
//    Board.SetRearRightLight(1);
//    while(1);

while(1){
        Board.SetFrontLeftLight(1);
        Board.SetFrontRightLight(1);
        Board.SetRearLeftLight(0);
        Board.SetRearRightLight(0);

        for(int s=0;s<1000;s++){
            Engine.Forward(s);
            for(volatile long i=200; i>0; i--);
        }
        for(int s=1000;s>0;s--){
            Engine.Forward(s);
            for(volatile long i=200; i>0; i--);
        }

        Engine.Break();
        Board.SetFrontLeftLight(0);
        Board.SetFrontRightLight(0);
        Board.SetRearLeftLight(1);
        Board.SetRearRightLight(1);

        for(int s=0;s<1000;s++){
            Engine.Backward(s);
            for(volatile long i=200; i>0; i--);
        }
        for(int s=1000;s>0;s--){
            Engine.Backward(s);
            for(volatile long i=200; i>0; i--);
        }

        Engine.Break();
    }